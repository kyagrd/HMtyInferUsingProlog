:- set_prolog_flag(occurs_check,true).
:- op(500,yfx,$).

use_module(library(apply)). % for maplist
use_module(librar(gensym)). % for gensym

kind(KC,var(Z),K1) :- first(Z:K,KC), instantiate(K,K1).
kind(KC,F $ G, K2) :- kind(KC,F,K1 -> K2), kind(KC,G,K1).
kind(KC,A -> B,o)  :- kind(KC,A,o), kind(KC,B,o).

type(KC,C,var(X),     T1,G,G ) :- first(X:T,C), instantiate(T,T1).
type(KC,C,lam(X,E), A->B,G,G1) :- type(KC,[X:mono(A)|C],E,B,G0,G1),
                                  G0 = [kind(KC,A->B,o)|G]. % delay goal
type(KC,C,X $ Y,       B,G,G1) :- type(KC,C,X,A->B,G, G0),
                                  type(KC,C,Y,A,   G0,G1).
type(KC,C,let(X=E0,E1),T,G,G1) :- type(KC,C,              E0,A,G, G0),
                                  type(KC,[X:poly(C,A)|C],E1,T,G0,G1).

instantiate(poly(C,T),T1) :- copy_term(t(C,T),t(C,T1)).
instantiate(mono(T),  T).

first(K:V,[K1:V1|Xs]) :- K=K1 -> V=V1 ; first(K:V,Xs).

variablize(var(X)) :- gensym(t,X).

infer_type(KC,C,E,T) :-
  type(KC,C,E,T,[],Gs0), % handle delayed kind sanity check below
  copy_term(Gs0,Gs),
  findall(Ty, member(kind(_,Ty,_),Gs), Tys),
  free_variables(Tys,Xs),
  maplist(variablize,Xs), % replace free tyvar to var(t)
  findall(A:mono(K),member(var(A),Xs),KC1),
  appendKC(Gs,KC1,Gs1), % extend with KC1 for new vars
  maplist(call,Gs1). % run all goals in Gs1

appendKC([],_,[]).
appendKC([kind(KC,X,K)|Gs],KC1,[kind(KC2,X,K)|Gs1]) :-
  append(KC1,KC,KC2), appendKC(Gs,KC1,Gs1).

