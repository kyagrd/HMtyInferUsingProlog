----------------------- REVIEW 1 ---------------------
PAPER: 1
TITLE: Executable Relational Specifications of Polymorphic Type Systems using Prolog
AUTHORS: Ki Yung Ahn and Andrea Vezzosi

OVERALL EVALUATION: 0 (borderline paper)
REVIEWER'S CONFIDENCE: 3 (medium)

----------- REVIEW -----------
Summary
=======

This paper provides a executable specification of the Hindley-Milner
type system for the lambda calculus augmented with let-expressions,
implemented in Prolog.
The specification is furthermore extended to cover additional typing concepts
such as type constructor polymorphism and kind polymorphism,
as well as language language constructs such as pattern matching,
recursive let-expressions or nested data types and polymorphic recursion.

The paper starts with the specification of the basic Hindley-Milner
typing system and exemplary queries, to demonstrate
the usefulness and applicability of the specification for the tasks
of type checking, type inference, and type inhabitation.

Afterwards, the extensions necessary to support type constructor polymorphism
as well as kind polymorphism are discussed in detail.

In the third section, the extension of the specification to additional
language constructs are sketched and their implementation is presented.

A section about future work emphasizes GADTs as well as types with
term-indices as possible topics worth further investigations,
and a section about related work discusses other approaches for
the simple specification of the Hindley-Milner typing systems and possible
extensions, as well as extensions to the logic programming language Prolog
that turned out to be helpful for the presented implementation.

Opinion
=======

The paper is good to read and sensibly structured,
and the presentation of the source code facilitates
the comprehension of the presented approach.
Furthermore, the choice of the declarative language Prolog
leads to a concise and high-level implementation of the formal
specification of the type system, which may provide a good basis
for the understanding and development of typing systems.

Unfortunately, the section 3.3 discussing the extension to nested
data types and polymorphic recursion is written in a very compact
style and some constructs lack an introduction,
which makes it hard to understand.

Moreover, the use of Prolog to implement inference systems
is natural and, thus, well known for a long time (e.g.,
compare Typol and similar approaches from the 90s) so that
the current approach is not quite innovative.
The authors should definitively compare their work to these
and other approaches to specify type systems, e.g., higher-order
logic systems like lambda-Prolog or LF (or Twelf, see
http://twelf.org/wiki/Lily).


Comments
========

While the first two sections are generally easy to follow,
especially section 3.3 is written in a very compact style.
For instance, the construct "Is-->T0" called an annotation
is not explained any further, and Figure 4 also contains
auxiliary functions ("unfold_N_ap") whose purpose is left open.
I therefore suggest to extend the explanation of the implementation
presented in Figure 4.
To get along with the supplied space, I furthermore suggest to reduce
or even omit the Figure 5, since in my perception it did not provide
as much insights as a more detailed explanation of Figure 4 would
have done.

In the conclusion you mentioned that a combined effort from both
the functional and logic programming community would be necessary
to improve on relational specifications of polymorphic type systems.
I do not know if you are familiar with the integrated functional-logic
language Curry (http://curry-language.org/),
but it may be well-suited for this task.
(Disclaimer: I am one of the developers of the Curry system KiCS2).

Typos, Style
============

- Please consider adding line numbers to your submissions, as it facilitates
  the exchange of typos and alike for both you and me!

- General: I suggest to set the word `let` in teletype when it refers to the
  language construct such as in `let`-binding, to distinguish it from the
  English verb.

- General: Please abbreviate references to page numbers as "p. XX" instead of
  "pX".

- Abstract: "implementations ... supports" -> "implementations support"

- Introduction: "... to the language*'s* type system.

- Introduction: The comparison of 90+ *pages* and 400+ *lines* dramatically
  relies on the number of lines per page, which limits the expressiveness
  of the statement. You may either clarify that the numbers originate from
  the cited paper or provide a separate estimation (for instance, the file
  `type.c` of the latest Hugs release contains 3356 lines, and relies on
  auxiliary modules).

- Introduction: "polymorhpic" -> "polymorphic"

- Introduction: "We contemplate ** more challenging language features"

- Section 2: You may want to capitalize this heading as well

- Section 2: Please (re-)introduce the abbreviation "HM" at the beginning,
  possibly accompanied by a citation.

- Section 2: "to perform *the/an* occurs check"

- Section 2: "left associative" -> "left-associative"

- Section 2: "represent *the* application operator"

- Section 2.1: Please clarify that only *non-recursive* let-bindings
  are considered.

- Section 2.1: "the *first* binding (X:T) that matches ..."

- Section 2.1: "self explanatory" -> "self-explanatory"

- Section 2.1: "let expressions introduce" -> "let-expressions introduces" (2 changes)

- Section 2.1: "... except *that* all Prolog variables ..."

- Section 2.1: "also for type inference" -> "as well as for type inference"

- Section 2.1: " the specifications ... serve" (not "serves")

- Section 2.1: "type checking and *type* inference"

- Section 2.2: "flavours" -> "flavors" (like in the abstract)

- Section 2.2: "hanging on the leaf*s*"

- Section 2.2: this generic tree datatype" (no trailing "s")

- Section 2.2: "without let binding" -> "without let- bindings" (2 changes)

- Section 2.2: "additional argument for *the* kinding context"

- Section 2.2: "c.f. HM specifications" -> "where the HM specification"

- Figure 2.2: The predicate `free_variables` has not been explained

- Figure 2.2: "binidngs" -> "bindings"

- Section 2.2: Please provide a reference to DCGs.

- Section 2.2: No comma before "as follows"

- Section 2.2, enumeration: Please write "first", second", etc. instead of
  "1st", "2nd", etc.

- Section 2.2, enumeration, point 1: "For example, ... infers" (no "it")
  and "one delayed goal, *namely* kind(...)"

- Section 3.1, heading: "Recursive Let-*B*indings"

- Section 3.1: "*We simply* add a monomorphic ..."

- Section 3.2: "Fig.3" -> "Fig. 3"

- Section 3.2: "to pattern match its value" (no "with")

- Section 3.2: "expression in Haskell *of the form* case ..."

- Section 3.2: "or a complex term with *an* n-ary ..."

- Section 3.2: "*an* n-ary data constructor"

- Section 3.2: "convention such that" -> "convention that"

- Section 3.2: change "A-> T" either to "A -> T" or "A->T"

- Figure 3: `lower_atom` is not used?

- Figure 4: `in(N,E)` was not explained

- Section 3.3: "therefore categorized" -> "and List is therefore categorized"

- Section 3.3: "has different type argument" -> has a type a argument different"

- Section 3.3: Fig. 4 is located on page 9, not on page 4!

- Section 3.3: "a recursion scheme [no comma] which naturally generalize*s* ..."

- Section 4: no comma after "local constraints"

- Section 4: Missing dot after system F_\omega.

- Section 4: "to be *supplied* to type constructors"

- Section 4: "invokes each other" -> "invoke each other"

- Section 4: "ha*s* to invoke"

- Section 4: "*and* therefore kinding rules ..."

- Section 5.1: Double dot after "Prolog"

- Section 5.2: No comma after "[19]"

- Section 5.3: Please provide an explanation for the abbreviation "PCF"

- Section 5.3: "delcarative" -> "declarative"

- Section 5.3: Please provide a reference to Kanren

- Section 5.3: "*it is* not best suited"

- Section 5.3: "S-resolution can answer more queries that makes SLD-resolution
  loop" -> "S-resolution can also answer some queries for which SLD-resolution
  fails to terminate"

- Section 5.4: "*and* therefore also challenging"

- Section 6: "found few" -> "we found a few"


----------------------- REVIEW 2 ---------------------
PAPER: 1
TITLE: Executable Relational Specifications of Polymorphic Type Systems using Prolog
AUTHORS: Ki Yung Ahn and Andrea Vezzosi

OVERALL EVALUATION: 1 (weak accept)
REVIEWER'S CONFIDENCE: 3 (medium)

----------- REVIEW -----------
The authors describe the use of Prolog as a high-level executable specification language
for type systems and type checking/inference algorithms. They use type systems inspired
by languages such as Haskell as an example, starting with a simple lambda calculus and a
Hindley-Damas-Milner-style type system, and later adding in concepts such as type
constructor and kind polymorphism, pattern matching, polymorphic recursion and more.

The main complication that arises is that there is need to delay some of the goals, and
create a staged algorithm. For example, during type checking, constraints on kinds are
collected, which need to be solved separately in a later stage.

Not being a Prolog expert myself, I can't help but feel that the approach to solving this
feels somewhat fragile and hacky, destroying the simplicity the approach otherwise sets
out to convey.

The paper is well written and reasonably accessible, and the topic is a good fit for
FLOPS. The problems and solutions are explained well.

It is conceivable (but also somewhat unsurprising) that with a bit of
practice, Prolog is a viable specification language for such type systems. What seems a
bit sad is that there seems to be no way to generate the Prolog specification out of a
yet more declarative system, or alternatively to transfer the Prolog implementation
into other programming languages, which makes me believe that more specialized tools
like e.g. Ott (by Sewell et al, ICFP 2007) may be more useful in practice. Sadly, no
comparison with Ott is given, although the more general comparison with Coq applies to
some extent.

OTHER COMMENTS:

P1: "Glasgow Haskell Compiler supports" -> "support"
P2: "capturing both type checking and type inference without duplication" This seems
compelling at first, but for more complicated systems, where efficient inference can
be significantly more complex as checking, does it not mean that we have to expect a
more complex specification than necessary for pure type checking?
P2: "A relational specification that can" <- of what, exactly?
P2: I found the final item in the list of contributions difficult to read/parse.
P3: Not that it matters much, but why make $ left associative in deviation from Haskell?
P3: In the first paragraph of 2.1, it's unclear at this point what the role of C is,
exactly.
P3: "introduce polymorphic bindings" -> "introduces"
P3: instantiate and copy_term are rather subtle, and might be easier to understand
with a concrete example.
P3: It would be so much nicer if the Prolog rules had types, even if only as comments.
P4: I'd rather see a definition of "type constructor polymorphism" than just an
example.
P4: While you see the need to explain type constructor polymorphism, you simply
talk about kind polymorphism as if it doesn't need explanation. This seems inconsistent.
P5: "notated with" -> "denoted by". Also, I'm not sure if using * for the type of types
is really something that's done "usually". It seems very Haskell-specific.
P5: "some modification" -> "some modifications"
P5: "First step is to" -> "The first step"
P6: Why repeat the code that does not change? [If you do, might be nice to highlight the
changes.]
P8: "patten" -> "pattern"
P10: "In Fig. 4 (on p4)" -> "on p9"
P10: "naturally generalize" -> "naturally generalizes"
P12: "using Prolog. ." -> remove extra period


----------------------- REVIEW 3 ---------------------
PAPER: 1
TITLE: Executable Relational Specifications of Polymorphic Type Systems using Prolog
AUTHORS: Ki Yung Ahn and Andrea Vezzosi

OVERALL EVALUATION: 2 (accept)
REVIEWER'S CONFIDENCE: 3 (medium)

----------- REVIEW -----------
This is  nice paper that provides some cool insight into the design of HM module systems, that have proven to be so useful within the context of functional programming. It is a subject also relevant to the LP community, eg:

        Tom Schrijvers, Vítor Santos Costa, Jan Wielemaker, Bart Demoen:
Towards Typed Prolog. ICLP 2008: 693-697

The paper is well written and generally easy to follow. It would be nice to have a clearer discussion on how these ideas can be used in the LP/FP communities, and the paper sometimes assumes the reader knows the details of the Haskell type system.

SOme comments:

- the paper would be stronger if it could clarify at the beginning the extent to which it covers a full FP implementation (and there are several to choose from).

- m. Jones’ attempt of Typing Haskell in Haskell [14] -> how many lines would this take in your formalism?

- mono and poly are ok, but lam? What about lambda or just \ ?

- The Fig 1 program is really critical to the paper, so it should start by precisely defining what it does: type an expression E, given a typing context C. Maybe you could add a short pldoc style comment to Fig 1 in order to do that?

- 2.2 really needs a precise definition of kind polymorphism.

using a neat syntax. -> I actually agree, but this is a technical paper, so I'd probably try to limit myself to stuff that be proved :)

- With fully functioning basic building
blocks for kind inference (kind) and type inference (type), should be .... -> It would be nice if you could have a stronger argument here.

- Last, there is a clear application of your system as a pedagogical tool, but is that it? Also, it would be nice to have a broad perspective on the state of typing in Haskell and ML, and how far you thin you are?

- Weird question: what about modules?
